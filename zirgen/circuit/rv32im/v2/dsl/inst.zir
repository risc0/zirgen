// RUN: true

import consts;
import decode;
import mem;
import one_hot;

component InstInput(major: Val, minor: Val, pc_u32: ValU32, state: Val, mode: Val) {
  public major := major;
  public minor := minor;
  public pc_u32 := pc_u32;
  public state := state;
  public mode := mode;
  public minor_onehot := OneHot<8>(minor);
}

component DoCycleTable(cycle: Reg) {
  // Cancel out 'cycle' table entries
  arg1 := CycleArg(-GetDiffCount(2*cycle), 2*cycle);
  arg2 := CycleArg(-GetDiffCount(2*cycle+1), 2*cycle + 1);
  arg1.cycle = 2*cycle;
  arg2.cycle = 2*cycle + 1;
}

component DecodeInst(cycle: Reg, ii: InstInput) {
  // Decompose PC into an address
  pc_addr := AddrDecompose(ii.pc_u32, ii.mode);
  // Verify alignment
  pc_addr.low2 = 0;
  // Load instruction
  load_inst := MemoryRead(cycle, pc_addr);
  // Decode instruction
  Decoder(load_inst)
}

component ReadReg(cycle: Reg, input: InstInput, reg: Val) {
  addr := Reg(input.mode * MachineRegBase() + (1 - input.mode) * UserRegBase() + reg);
  MemoryRead(cycle, addr)
}

component SourceRegs(rs1: ValU32, rs2: ValU32) {
  public rs1 := rs1;
  public rs2 := rs2;
}

component ReadSourceRegs(cycle: Reg, ii: InstInput, decoded: DecodeInst) {
  is_same_reg := NondetReg(Isz(decoded.rs1 - decoded.rs2));
  // Verify is_same_reg is boolean
  is_same_reg * (1 - is_same_reg) = 0;
  source_regs := if (is_same_reg) {
    // If is_same_reg, verify we really are the same reg, and read once
    decoded.rs1 = decoded.rs2;
    rboth := ReadReg(cycle, ii, decoded.rs1);
    SourceRegs(rboth, rboth)
  } else {
    // Otherwise read twice, if we are the same reg, this will fail
    // because one of the reads will happen on the same cycle
    SourceRegs(
      ReadReg(cycle, ii, decoded.rs1),
      ReadReg(cycle, ii, decoded.rs2))
  };
  rs1Low := Reg(source_regs.rs1.low);
  rs1High:= Reg(source_regs.rs1.high);
  rs2Low := Reg(source_regs.rs2.low);
  rs2High := Reg(source_regs.rs2.high);
  public rs1 := ValU32(rs1Low, rs1High);
  public rs2 := ValU32(rs2Low, rs2High);
}

component WriteRd(cycle: Reg, input: InstInput, decoded: Decoder, do_write: Val, write_data: ValU32) {
  isRd0 := IsZero(decoded.rd);
  do_write := (1 - isRd0) * do_write;
  reg := do_write * decoded.rd;
  write_addr := Reg(input.mode * MachineRegBase() + (1 - input.mode) * UserRegBase() + (1 - do_write) * 64 + reg);
  MemoryWrite(cycle, write_addr, write_data);
}

component InstOutputBase(new_pc: ValU32, new_state: Val, new_mode: Val, topState: BigIntTopState) {
  public new_pc := new_pc;
  public new_state := new_state;
  public new_mode := new_mode;
  public topState := topState;
}

component InstOutput(new_pc: ValU32, new_state: Val, new_mode: Val) {
  InstOutputBase(new_pc, new_state, new_mode, BigIntTopStateNull())
}

#[picus_inline]
component VerifyOpcode(decoded: Decoder, opcode: Val) {
  decoded.opcode = opcode;
}

#[picus_inline]
component VerifyOpcodeF3(decoded: Decoder, opcode: Val, func3: Val) {
  decoded.opcode = opcode;
  decoded.func3 = func3;
}

#[picus_inline]
component VerifyOpcodeF3F7(decoded: Decoder, opcode: Val, func3: Val, func7: Val) {
  decoded.opcode = opcode;
  decoded.func3 = func3;
  decoded.func7 = func7;
}

component BigIntTopState(polyOp: Val, coeff: Val, witness: Array<Val, 16>) {
  public polyOp := polyOp;
  public coeff := coeff;
  public witness := witness;
}

component BigIntTopStateNull() {
  BigIntTopState(0, 0, for i : 0..16 { 0 })
}
