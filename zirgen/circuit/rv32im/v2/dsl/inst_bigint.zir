// RUN: true

extern BigIntExtern(): Array<Val, 16>;

component BigIntState(
  isEcall: Val,
  mode: Val,
  pc: Val,
  polyOp: Val,
  coeff: Val,
  bytes: Array<Val, 16>,
  nextState: Val
) {
  public isEcall := BitReg(isEcall);
  public mode := BitReg(mode);
  public pc := Reg(pc);
  public polyOp := Reg(polyOp);
  public coeff := Reg(coeff);
  public bytes := for x : bytes { Reg(x) };
  public nextState := Reg(nextState);
}

component BigIntInvalid() {
  // Log("BigIntInvalid");

  0 = 1;
  BigIntState(
    /*isEcall=*/0,
    /*mode=*/0,
    /*pc=*/0,
    /*polyOp=*/0,
    /*coeff=*/0,
    /*bytes=*/for i : 0..16 { 0 },
    /*nextState=*/StateDecode()
  )
}

component BigIntEcall(cycle: Reg) {
  // Log("BigIntEcall");

  mode := MemoryRead(cycle, MachineRegBase() + RegT0());
  mode.high = 0;

  pc := ReadAddr(cycle, RegT2());

  BigIntState(
    /*isEcall=*/1,
    /*mode=*/mode.low,
    /*pc=*/pc - 1,
    /*polyOp=*/0, // nop
    /*coeff=*/0,
    /*bytes=*/for i : 0..16 { 0 },
    /*nextState=*/StateBigIntStep()
  )
}

component SplitU32(x : ValU32) {
  low := SplitWord(x.low);
  high := SplitWord(x.high);
  public bytes := [low.byte0, low.byte1, high.byte0, high.byte1];
}

// Ensure that memory access is allowed based on mode
component BigIntAddr(addrU32: ValU32, mode: Val) {
  IsZero(addrU32.high - 0xbfff) = 0;
  addr := AddrDecomposeBits(addrU32, mode);
  addr.low2 = 0;
  addr
}

component BigIntRead(cycle: Reg, addrU32: ValU32, mode: Val) {
  // Log("BigIntRead");

  addr := BigIntAddr(addrU32, mode);
  words := for i : 0..4 {
    SplitU32(MemoryRead(cycle, addr + i))
  };

  [
    words[0].bytes[0], words[0].bytes[1], words[0].bytes[2], words[0].bytes[3],
    words[1].bytes[0], words[1].bytes[1], words[1].bytes[2], words[1].bytes[3],
    words[2].bytes[0], words[2].bytes[1], words[2].bytes[2], words[2].bytes[3],
    words[3].bytes[0], words[3].bytes[1], words[3].bytes[2], words[3].bytes[3]
  ]
}

component BigIntWitness(ret: Array<Val, 16>) {
  for v : ret { NondetU8Reg(v) }
}

component BigIntWrite(cycle: Reg, addrU32: ValU32, mode: Val) {
  // Log("BigIntWrite");

  addr := BigIntAddr(addrU32, mode);
  bytes := BigIntWitness(BigIntExtern());
  for i : 0..4 {
    word := ValU32(
      bytes[i * 4 + 0] + bytes[i * 4 + 1] * 0x100,
      bytes[i * 4 + 2] + bytes[i * 4 + 3] * 0x100
    );
    MemoryWrite(cycle, addr + i, word);
  };
  bytes
}

component BigIntCheck() {
  // Log("BigIntCheck");
  BigIntWitness(BigIntExtern())
}

component BigIntStep(cycle: Reg, prev: BigIntState) {
  // Log("BigIntStep");

  pc := prev.pc + 1;
  Log("pc", pc);

  // Read & decode the instruction
  loadInst := MemoryRead(cycle, pc);
  instHigh := SplitWord(loadInst.high);

  instType := instHigh.byte1;
  coeffReg := instHigh.byte0;

  polyOp := NondetReg(instType & 0xf);
  memOp := NondetReg((instType - polyOp) / 16);
  memOp * 16 + polyOp = instType;

  regBits := for i : 0..5 { NondetBitReg((coeffReg & Po2(i)) / Po2(i)) };
  reg := reduce for i : 0..5 { regBits[i] * Po2(i) } init 0 with Add;

  coeffBits := for i : 0..3 { NondetBitReg((coeffReg & Po2(5 + i)) / Po2(5 + i)) };
  coeff := reduce for i : 0..3 { coeffBits[i] * Po2(i) } init 0 with Add;
  32 * coeff + reg = coeffReg;

  offset := loadInst.low;

  // Read the register value and compute initial address
  baseAddrU32 := MemoryRead(cycle, MachineRegBase() + reg);
  dataAddrU32 := NormalizeU32(AddU32(baseAddrU32, ValU32(offset * 4 * 4, 0)));

  // Log("polyOp, memOp, reg, coeff, offset, addr", polyOp, memOp, reg, coeff, offset, dataAddr);

  memOpOneHot := OneHot<3>(memOp);
  bytes := memOpOneHot -> (
    BigIntRead(cycle, dataAddrU32, prev.mode),
    BigIntWrite(cycle, dataAddrU32, prev.mode),
    BigIntCheck()
  );

  // Check if the instruction is a pure NOP & not first
  isLast := IsZero(polyOp) * (1 - prev.isEcall);
  nextState := if (isLast) {
    StateDecode()
  } else {
    StateBigIntStep()
  };

  BigIntState(
    /*isEcall=*/0,
    /*mode=*/prev.mode,
    /*pc=*/pc,
    /*polyOp=*/polyOp,
    /*coeff=*/coeff,
    /*bytes=*/bytes,
    /*nextState=*/nextState
  )
}

component BigInt0(cycle: Reg, inst_input: InstInput) {
  Log("BigInt0");
  DoCycleTable(cycle);
  inst_input.state = StateBigIntEcall() + inst_input.minor;
  state : BigIntState;
  state := inst_input.minor_onehot -> (
    BigIntEcall(cycle),
    BigIntStep(cycle, state@1),
    BigIntInvalid(),
    BigIntInvalid(),
    BigIntInvalid(),
    BigIntInvalid(),
    BigIntInvalid(),
    BigIntInvalid()
  );
  topState := BigIntTopState(state.polyOp, state.coeff, state.bytes);
  InstOutputBase(inst_input.pc_u32, state.nextState, inst_input.mode, topState)
}

component BigIntAccumState(poly: ExtVal, term: ExtVal, total: ExtVal) {
  public poly := ExtReg(poly);
  public term := ExtReg(term);
  public total := ExtReg(total);
}

component BigIntAccum(topState: BigIntTopState, mix: Array<ExtVal, 1>) {
  polyOp := OneHot<7>(topState.polyOp);
  state : BigIntAccumState;
  state := polyOp -> (
    BigIntPolyOpNop(),
    BigIntPolyOpShift(topState, state@1, mix[0]),
    BigIntPolyOpSetTerm(topState, state@1, mix[0]),
    BigIntPolyOpAddTotal(topState, state@1, mix[0]),
    BigIntPolyOpCarry1(topState, state@1, mix[0]),
    BigIntPolyOpCarry2(topState, state@1, mix[0]),
    BigIntPolyOpEqz(topState, state@1, mix[0])
  );
}

component BigIntAccumPowers(mix: ExtVal) {
  powers0 := MakeExt(1);
  powers1 := ExtMul(powers0, mix);
  powers2 := ExtMul(powers1, mix);
  powers3 := ExtMul(powers2, mix);
  powers4 := ExtMul(powers3, mix);
  powers5 := ExtMul(powers4, mix);
  powers6 := ExtMul(powers5, mix);
  powers7 := ExtMul(powers6, mix);
  powers8 := ExtMul(powers7, mix);
  powers9 := ExtMul(powers8, mix);
  powers10 := ExtMul(powers9, mix);
  powers11 := ExtMul(powers10, mix);
  powers12 := ExtMul(powers11, mix);
  powers13 := ExtMul(powers12, mix);
  powers14 := ExtMul(powers13, mix);
  powers15 := ExtMul(powers14, mix);
  powers16 := ExtMul(powers15, mix);
  [
    powers0, powers1, powers2, powers3,
    powers4, powers5, powers6, powers7,
    powers8, powers9, powers10, powers11,
    powers12, powers13, powers14, powers15,
    powers16
  ]
}

component BigIntAccumStep(topState: BigIntTopState, prev: BigIntAccumState, mix: ExtVal) {
  public powers := BigIntAccumPowers(mix);

  public deltaPoly := reduce for i : 0..16 {
    ExtMul(powers[i], MakeExt(topState.witness[i]))
  } init MakeExt(0) with ExtAdd;

  public negPoly := reduce for i : 0..16 {
    ExtMul(powers[i], MakeExt(128))
  } init MakeExt(0) with ExtAdd;

  public newPoly := ExtAdd(prev.poly, deltaPoly);
}

component BigIntPolyOpNop() {
  // nop
  BigIntAccumState(
    /*poly=*/MakeExt(0),
    /*term=*/MakeExt(1),
    /*total=*/MakeExt(0)
  )
}

component BigIntPolyOpShift(topState: BigIntTopState, prev: BigIntAccumState, mix: ExtVal) {
  // Log("BigIntPolyOpShift", topState.coeff, topState.witness[0], topState.witness[1]);
  step := BigIntAccumStep(topState, prev, mix);
  BigIntAccumState(
    /*poly=*/ExtMul(step.newPoly, step.powers[16]),
    /*term=*/prev.term,
    /*total=*/prev.total
  )
}

component BigIntPolyOpSetTerm(topState: BigIntTopState, prev: BigIntAccumState, mix: ExtVal) {
  // Log("BigIntPolyOpSetTerm");
  step := BigIntAccumStep(topState, prev, mix);
  BigIntAccumState(
    /*poly=*/MakeExt(0),
    /*term=*/step.newPoly,
    /*total=*/prev.total
  )
}

component BigIntPolyOpAddTotal(topState: BigIntTopState, prev: BigIntAccumState, mix: ExtVal) {
  // Log("BigIntPolyOpAddTotal");
  coeff := MakeExt(topState.coeff - 4);
  step := BigIntAccumStep(topState, prev, mix);
  tmp := ExtReg(ExtMul(coeff, prev.term));
  BigIntAccumState(
    /*poly=*/MakeExt(0),
    /*term=*/MakeExt(1),
    /*total=*/ExtAdd(prev.total, ExtMul(tmp, step.newPoly))
  )
}

component BigIntPolyOpCarry1(topState: BigIntTopState, prev: BigIntAccumState, mix: ExtVal) {
  // Log("BigIntPolyOpCarry1");
  step := BigIntAccumStep(topState, prev, mix);
  BigIntAccumState(
    /*poly=*/ExtAdd(prev.poly, ExtMul(ExtSub(step.deltaPoly, step.negPoly), MakeExt(16384))),
    /*term=*/prev.term,
    /*total=*/prev.total
  )
}

component BigIntPolyOpCarry2(topState: BigIntTopState, prev: BigIntAccumState, mix: ExtVal) {
  // Log("BigIntPolyOpCarry2");
  step := BigIntAccumStep(topState, prev, mix);
  BigIntAccumState(
    /*poly=*/ExtAdd(prev.poly, ExtMul(step.deltaPoly, MakeExt(256))),
    /*term=*/prev.term,
    /*total=*/prev.total
  )
}

component BigIntPolyOpEqz(topState: BigIntTopState, prev: BigIntAccumState, mix: ExtVal) {
  // Log("BigIntPolyOpEqz");
  step := BigIntAccumStep(topState, prev, mix);
  carryMul := ExtSub(step.powers[1], MakeExt(256));
  goalZero := ExtAdd(prev.total, ExtMul(step.newPoly, carryMul));
  EqzExt(goalZero);
  BigIntAccumState(
    /*poly=*/MakeExt(0),
    /*term=*/MakeExt(1),
    /*total=*/MakeExt(0)
  )
}
