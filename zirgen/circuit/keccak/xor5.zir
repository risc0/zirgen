// Special handling for xoring 5 values via arithmetization tricks
// RUN: zirgen  -I %S --test %s

import bits;

component Xor5(vals: Array<Val, 5>) {
  tot := reduce vals init 0 with Add;
  out := NondetBitReg(tot & 1);
  diff := tot - out;
  diff * (2 - diff) * (4 - diff) = 0;
  out
}

test Xor5 {
  Xor5([0, 0, 0, 0, 0]) = 0;
  Xor5([0, 0, 0, 0, 1]) = 1;
  Xor5([0, 0, 0, 1, 0]) = 1;
  Xor5([0, 0, 0, 1, 1]) = 0;
  Xor5([0, 0, 1, 0, 0]) = 1;
  Xor5([0, 0, 1, 0, 1]) = 0;
  Xor5([0, 0, 1, 1, 0]) = 0;
  Xor5([0, 0, 1, 1, 1]) = 1;
  Xor5([0, 1, 0, 0, 0]) = 1;
  Xor5([0, 1, 0, 0, 1]) = 0;
  Xor5([0, 1, 0, 1, 0]) = 0;
  Xor5([0, 1, 0, 1, 1]) = 1;
  Xor5([0, 1, 1, 0, 0]) = 0;
  Xor5([0, 1, 1, 0, 1]) = 1;
  Xor5([0, 1, 1, 1, 0]) = 1;
  Xor5([0, 1, 1, 1, 1]) = 0;
  Xor5([1, 0, 0, 0, 0]) = 1;
  Xor5([1, 0, 0, 0, 1]) = 0;
  Xor5([1, 0, 0, 1, 0]) = 0;
  Xor5([1, 0, 0, 1, 1]) = 1;
  Xor5([1, 0, 1, 0, 0]) = 0;
  Xor5([1, 0, 1, 0, 1]) = 1;
  Xor5([1, 0, 1, 1, 0]) = 1;
  Xor5([1, 0, 1, 1, 1]) = 0;
  Xor5([1, 1, 0, 0, 0]) = 0;
  Xor5([1, 1, 0, 0, 1]) = 1;
  Xor5([1, 1, 0, 1, 0]) = 1;
  Xor5([1, 1, 0, 1, 1]) = 0;
  Xor5([1, 1, 1, 0, 0]) = 1;
  Xor5([1, 1, 1, 0, 1]) = 0;
  Xor5([1, 1, 1, 1, 0]) = 0;
  Xor5([1, 1, 1, 1, 1]) = 1;
}

