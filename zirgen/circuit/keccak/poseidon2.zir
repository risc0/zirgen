// RUN: zirgen -I %S --test %s

import one_hot;

component M_INT_DIAG_HZN() {[
    0x409133f0, 0x1667a8a1, 0x06a6c7b6, 0x6f53160e, 0x273b11d1, 0x03176c5d, 0x72f9bbf9, 0x73ceba91,
    0x5cdef81d, 0x01393285, 0x46daee06, 0x065d7ba6, 0x52d72d6f, 0x05dd05e0, 0x3bab4b63, 0x6ada3842,
    0x2fc5fbec, 0x770d61b0, 0x5715aae9, 0x03ef0e90, 0x75b6c770, 0x242adf5f, 0x00d0ca4c, 0x36c0e388
  ]
}

component MultiplyByMInt(in: Array<Val, 24>) {
  sum := reduce in init 0 with Add;
  for i : 0..24 { sum + M_INT_DIAG_HZN()[i] * in[i] }
}

component INT_ROUND_CONSTANTS() {[
    0x1DA78EC2, 0x730B0924, 0x3EB56CF3, 0x5BD93073, 0x37204C97, 0x51642D89, 0x66E943E8, 0x1A3E72DE,
    0x70BEB1E9, 0x30FF3B3F, 0x4240D1C4, 0x12647B8D, 0x65D86965, 0x49EF4D7C, 0x47785697, 0x46B3969F,
    0x5C7B7A0E, 0x7078FC60, 0x4F22D482, 0x482A9AEE, 0x6BEB839D
  ]
}

component SBox(in: Val) {
  cubed := Reg(in * in * in);
  out := Reg(cubed * cubed * in);
  out
}

component DoIntRound(in: Array<Val, 24>, rc: Val) {
  x := in[0] + rc;
  sbox := SBox(x);
  mat_in := for i : 0..24 { Isz(i) * sbox + (1 - Isz(i)) * in[i] };
  MultiplyByMInt(mat_in)
}

component DoIntRounds(in: Array<Val, 24>) {
  reduce for x : INT_ROUND_CONSTANTS() { x } init in with DoIntRound
}

component MultiplyByCirculant(in: Array<Val, 4>) {
  t0 := (in[0] + in[1]);
  t1 := (in[2] + in[3]);
  t2 := (2 * in[1] + t1);
  t3 := (2 * in[3] + t0);
  t4 := (4 * t1 + t3);
  t5 := (4 * t0 + t2);
  t6 := (t3 + t5);
  t7 := (t2 + t4);
  [t6, t5, t7, t4]
}

component ReduceVec4(a: Array<Val, 4>, b: Array<Val, 4>) { 
  for i : 0..4 { a[i] + b[i] }
}

component MultiplyByMExt(in: Array<Val, 24>) {
  // Compute the ext groups
  grouped := for i : 0..6 { 
    chunk := for j : 0..4 { in[i*4 + j] };
    MultiplyByCirculant(chunk)
  };
  // Total across the 6 cases
  tot_to_add := reduce grouped init [0, 0, 0, 0] with ReduceVec4;
  for i : 0..24 {
    j := i & 3;
    // 1509949441 is 1/4, but / 4 causes compiler failure
    g := (i - j) * 1509949441;  
    grouped[g][j] + tot_to_add[j]
  }
}

function ExtRoundConstants() {
  [
    [0x0FA20C37, 0x0795BB97, 0x12C60B9C, 0x0EABD88E, 0x096485CA, 0x07093527, 0x1B1D4E50, 0x30A01ACE,
     0x3BD86F5A, 0x69AF7C28, 0x3F94775F, 0x731560E8, 0x465A0ECD, 0x574EF807, 0x62FD4870, 0x52CCFE44,
     0x14772B14, 0x4DEDF371, 0x260ACD7C, 0x1F51DC58, 0x75125532, 0x686A4D7B, 0x54BAC179, 0x31947706],
    [0x29799D3B, 0x6E01AE90, 0x203A7A64, 0x4F7E25BE, 0x72503F77, 0x45BD3B69, 0x769BD6B4, 0x5A867F08,
     0x4FDBA082, 0x251C4318, 0x28F06201, 0x6788C43A, 0x4C6D6A99, 0x357784A8, 0x2ABAF051, 0x770F7DE6,
     0x1794B784, 0x4796C57A, 0x724B7A10, 0x449989A7, 0x64935CF1, 0x59E14AAC, 0x0E620BB8, 0x3AF5A33B],
    [0x4465CC0E, 0x019DF68F, 0x4AF8D068, 0x08784F82, 0x0CEFDEAE, 0x6337A467, 0x32FA7A16, 0x486F62D6,
     0x386A7480, 0x20F17C4A, 0x54E50DA8, 0x2012CF03, 0x5FE52950, 0x09AFB6CD, 0x2523044E, 0x5C54D0EF,
     0x71C01F3C, 0x60B2C4FB, 0x4050B379, 0x5E6A70A5, 0x418543F5, 0x71DEBE56, 0x1AAD2994, 0x3368A483],
    [0x07A86F3A, 0x5EA43FF1, 0x2443780E, 0x4CE444F7, 0x146F9882, 0x3132B089, 0x197EA856, 0x667030C3,
     0x2317D5DC, 0x0C2C48A7, 0x56B2DF66, 0x67BD81E9, 0x4FCDFB19, 0x4BAAEF32, 0x0328D30A, 0x6235760D,
     0x12432912, 0x0A49E258, 0x030E1B70, 0x48CAEB03, 0x49E4D9E9, 0x1051B5C6, 0x6A36DBBE, 0x4CFF27A5],
    [0x032959AD, 0x2B18AF6A, 0x55D3DC8C, 0x43BD26C8, 0x0C41595F, 0x7048D2E2, 0x00DB8983, 0x2AF563D7,
     0x6E84758F, 0x611D64E1, 0x1F9977E2, 0x64163A0A, 0x5C5FC27B, 0x02E22561, 0x3A2D75DB, 0x1BA7B71A,
     0x34343F64, 0x7406B35D, 0x19DF8299, 0x6FF4480A, 0x514A81C8, 0x57AB52CE, 0x6AD69F52, 0x3E0C0E0D],
    [0x48126114, 0x2A9D62CC, 0x17441F23, 0x485762BB, 0x2F218674, 0x06FDC64A, 0x0861B7F2, 0x3B36EEE6,
     0x70A11040, 0x04B31737, 0x3722A872, 0x2A351C63, 0x623560DC, 0x62584AB2, 0x382C7C04, 0x3BF9EDC7,
     0x0E38FE51, 0x376F3B10, 0x5381E178, 0x3AFC61C7, 0x5C1BCB4D, 0x6643CE1F, 0x2D0AF1C1, 0x08F583CC],
    [0x5D6FF60F, 0x6324C1E5, 0x74412FB7, 0x70C0192E, 0x0B72F141, 0x4067A111, 0x57388C4F, 0x351009EC,
     0x0974C159, 0x539A58B3, 0x038C0CFF, 0x476C0392, 0x3F7BC15F, 0x4491DD2C, 0x4D1FEF55, 0x04936AE3,
     0x58214DD4, 0x683C6AAD, 0x1B42F16B, 0x6DC79135, 0x2D4E71EC, 0x3E2946EA, 0x59DCE8DB, 0x6CEE892A],
    [0x47F07350, 0x7106CE93, 0x3BD4A7A9, 0x2BFE636A, 0x430011E9, 0x001CD66A, 0x307FAF5B, 0x0D9EF3FE,
     0x6D40043A, 0x2E8F470C, 0x1B6865E8, 0x0C0E6C01, 0x4D41981F, 0x423B9D3D, 0x410408CC, 0x263F0884,
     0x5311BBD0, 0x4DAE58D8, 0x30401CEA, 0x09AFA575, 0x4B3D5B42, 0x63AC0B37, 0x5FE5BB14, 0x5244E9D4]
 ]
}

component DoExtRound(in: Array<Val, 24>, rc: Array<Val, 24>) {
  MultiplyByMExt(for i : 0..24 { SBox(in[i] + rc[i]) })
}

component AddConsts(a: Array<Val, 24>, b: Array<Val, 24>) {
  for i : 0..24 { a[i] + b[i] }
}

component MultBy(a: Array<Val, 24>, m: Val) {
  for v : a { v * m }
}

component DoExtRoundByIdx(in: Array<Val, 24>, idx: Val) {
  idxHot := OneHot<8>(idx);
  // Construct constants which are degree 1...
  zeroConsts := for i : 0..24 { 0 };
  mixedConsts := reduce for i : 0..8 {
    MultBy(ExtRoundConstants()[i], idxHot.bits[i])
  } init zeroConsts with AddConsts;
  // Do ext round with those constants
  DoExtRound(in, mixedConsts)
}

test vector {
  stage0 := for i : 0..24 { Isz(i & 0xf0) * i };
  stage0x := MultiplyByMExt(stage0);
  stage1 := DoExtRoundByIdx(stage0x, 0);
  stage2 := DoExtRoundByIdx(stage1, 1);
  stage3 := DoExtRoundByIdx(stage2, 2);
  stage4 := DoExtRoundByIdx(stage3, 3);
  stage5 := DoIntRounds(stage4);
  stage6 := DoExtRoundByIdx(stage5, 4);
  stage7 := DoExtRoundByIdx(stage6, 5);
  stage8 := DoExtRoundByIdx(stage7, 6);
  stage9 := DoExtRoundByIdx(stage8, 7);
  stage9[0] = 1749308481;
  stage9[1] = 879447913;
  stage9[2] = 499502012;
  stage9[3] = 1842374203;
  stage9[4] = 1869354733;
  stage9[5] = 71489094;
  stage9[6] = 19273002;
  stage9[7] = 690566044;
}

