// This file contains utilities that work with bits and twits.
// RUN: zirgen --test %s

// Vector / List functions

// Shifts + Rotates
component RotateLeft<SIZE: Val>(in: Array<Val, SIZE>, n: Val) {
  for i : 0..SIZE {
    if (InRange(0, i - n, SIZE)) { in[i - n] } else { in[SIZE + i - n] }
  }
}

component RotateRight<SIZE: Val>(in: Array<Val, SIZE>, n: Val) {
  for i : 0..SIZE {
    if (InRange(0, i + n, SIZE)) { in[i + n] } else { in[i + n - SIZE] }
  }
}

component ShiftLeft<SIZE: Val>(in: Array<Val, SIZE>, n: Val) {
  for i : 0..SIZE {
    if (InRange(0, i - n, SIZE)) { in[i - n] } else { 0 }
  }
}

component ShiftRight<SIZE: Val>(in: Array<Val, SIZE>, n: Val) {
  for i : 0..SIZE {
    if (InRange(0, i + n, SIZE)) { in[i + n] } else { 0 }
  }
}

#[picus_inline]
component EqArr<SIZE: Val>(a: Array<Val, SIZE>, b: Array<Val, SIZE>) {
  for i : 0..SIZE {
    a[i] = b[i];
  }
}

// Tests....

test ShiftAndRotate {
  // TODO: Now that these support non-bit values, maybe make new tests
  // Remember: array entry 0 is the low bit, so there seem backwards
  EqArr<8>(ShiftRight<8>([1, 1, 1, 0, 1, 0, 0, 0], 2), [1, 0, 1, 0, 0, 0, 0, 0]);
  EqArr<8>(ShiftLeft<8>([1, 1, 1, 0, 1, 0, 0, 0], 2), [0, 0, 1, 1, 1, 0, 1, 0]);
  EqArr<8>(RotateRight<8>([1, 1, 1, 0, 1, 0, 0, 0], 2), [1, 0, 1, 0, 0, 0, 1, 1]);
  EqArr<8>(RotateLeft<8>([1, 1, 1, 0, 1, 0, 0, 1], 2), [0, 1, 1, 1, 1, 0, 1, 0]);
}

