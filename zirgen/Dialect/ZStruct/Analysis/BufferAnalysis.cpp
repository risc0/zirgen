// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Utilities for analyzing layout buffer associations

#include "zirgen/Dialect/ZStruct/Analysis/BufferAnalysis.h"
#include "zirgen/Dialect/ZStruct/IR/TypeUtils.h"
#include "zirgen/Dialect/ZStruct/IR/ZStruct.h"
#include "zirgen/Dialect/Zll/IR/IR.h"

namespace zirgen::ZStruct {

using namespace mlir;

namespace {

// If this is a top-level layout, return the buffer associated with it.
StringRef getLayoutBuffer(GlobalConstOp globalConstOp) {
  StringRef symName = globalConstOp.getSymName();
  if (!symName.consume_front("layout$"))
    // Not a layout.
    return {};
  if (symName.starts_with("_")) {
    // Not a top-level layout; this is one generated by ExpandLayoutPass.
    return {};
  }
  if (symName.ends_with("$accum"))
    return "accum";
  if (symName == "Top")
    return "data";
  if (symName.starts_with("test$"))
    return "test";
  return symName;
}

} // namespace

BufferAnalysis::BufferAnalysis(mlir::ModuleOp mod) {}

std::pair<ZStruct::GlobalConstOp, Zll::BufferDescAttr>
BufferAnalysis::getLayoutAndBufferForArgument(mlir::BlockArgument layoutArg) {
  if (!ZStruct::isLayoutType(layoutArg.getType()))
    return {};

  Block* owner = layoutArg.getOwner();
  if (!owner)
    return {};
  Operation* func = owner->getParentOp();
  if (!func)
    return {};
  auto sym = SymbolTable::getSymbolName(func);
  if (!sym)
    return {};
  StringRef componentName = sym.strref();
  componentName.consume_front("comp_check$"); // TODO: delete after renaming comp_check
  componentName.consume_front("check$");
  componentName.consume_front("exec$");
  componentName.consume_back("$accum");

  GlobalConstOp globalConstOp;
  auto mod = func->getParentOfType<ModuleOp>();
  mod.walk([&](GlobalConstOp constOp) {
    if (constOp.getSymName().contains(componentName) && constOp.getType() == layoutArg.getType()) {
      assert(!globalConstOp && "found multiple possible layout symbols for the same buffer");
      globalConstOp = constOp;
    }
  });

  if (!globalConstOp)
    return {};

  auto bufs = Zll::lookupModuleAttr<Zll::BuffersAttr>(mod);
  if (!bufs)
    return {};

  StringRef layoutName = getLayoutBuffer(globalConstOp);
  if (layoutName.empty())
    return {};

  auto bufDesc = bufs.getBuffer(layoutName);
  if (!bufDesc)
    return {};

  return {globalConstOp, bufDesc};
}

} // namespace zirgen::ZStruct
