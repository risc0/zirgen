// RUN: zirgen %s --emit=picus | FileCheck %s

// CHECK: (begin-module Top)
// CHECK-NEXT: (output layout__super__super__super__super)
// CHECK-NEXT: (output layout_initial__super__super)
// CHECK-NEXT: (output layout_x_0__super__super__super)
// CHECK-NEXT: (output layout_x_1__super__super__super)
// CHECK-NEXT: (output layout_x_2__super__super__super)
// CHECK-NEXT: (output layout_x_3__super__super__super)
// CHECK-NEXT: (output layout_x_4__super__super__super)
// CHECK-NEXT: (assert (= (- 1 layout_initial__super__super) 0))
// CHECK-NEXT: (call [layout_x_0__super__super__super x0__super__super__super] MulReg [layout_initial__super__super layout_initial__super__super 1])
// CHECK-NEXT: (call [layout_x_1__super__super__super x1__super__super__super] MulReg [layout_x_0__super__super__super x0__super__super__super 2])
// CHECK-NEXT: (call [layout_x_2__super__super__super x2__super__super__super] MulReg [layout_x_1__super__super__super x1__super__super__super 3])
// CHECK-NEXT: (call [layout_x_3__super__super__super x3__super__super__super] MulReg [layout_x_2__super__super__super x2__super__super__super 4])
// CHECK-NEXT: (call [layout_x_4__super__super__super x4__super__super__super] MulReg [layout_x_3__super__super__super x3__super__super__super 5])
// CHECK-NEXT: (call [layout__super__super__super__super ] DoSomething [layout_x_4__super__super__super x4__super__super__super])
// CHECK-NEXT: (end-module)

component MulReg(x: Reg, y: Val) {
  Reg(x * y)
}

component DoSomething(x: Reg) {
  Reg(2 * x@0)
}

#[picus_analyze]
component Top() {
  initial := Reg(1);
  x := reduce 1..6 init initial with MulReg;
  DoSomething(x)
}
