// RUN: zirgen %s --emit=picus | FileCheck %s

// CHECK: (prime-number 2013265921)
// CHECK-NEXT: (begin-module Top)
// CHECK-NEXT: (output result_a__super)
// CHECK-NEXT: (output result_b__super)
// CHECK-NEXT: (output result_c__super)
// CHECK-NEXT: (output result_d__super)
// CHECK-NEXT: (assert (= result_a__super 1))
// CHECK-NEXT: (assert (= result_b__super 2))
// CHECK-NEXT: (assert (= result_c__super 4))
// CHECK-NEXT: (assert (= result_d__super 8))
// CHECK-NEXT: (end-module)
// CHECK-NOT: (begin-module Po2)


// Inline this component, so that the subscript index resolves to a compile-time
// constant. This component isn't deterministic on its own, and there's not even
// a sensible way to translate it into Picus anyway! Note that this restriction
// applies in regular Zirgen code too â€” if Po2(x) were used in a constraint with
// an arbitrary runtime value x after inlining and unrolling, the compiler would
// emit an error.
#[picus_inline]
component Po2(n: Val) {
  arr := [1, 2, 4, 8];
  arr[n]
}

#[picus_analyze]
component Top() {
  public a := Po2(0);
  public b := Po2(1);
  public c := Po2(2);
  public d := Po2(3);
}
